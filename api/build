#!/bin/bash

set -x

# setup env vars needed by build if we're running locally
if [ -z "${CODEBUILD_BUILD_ID}" ]; then
  export BUILDER_IMAGE="$(cd ../infra && terraform output -json | jq --raw-output .war.value.ecr.haskell.repository_url)"
  export IMAGE_NAME="$(cd ../infra && terraform output -json | jq --raw-output .war.value.ecr.api.repository_url)"
  export AWS_PROFILE="logic-refinery"
fi

BUILDER_TAG="latest"
FROM_IMAGE="debian"
FROM_TAG="10-slim"


#
# Automation to build and upload this docker image. 
#
echo $(aws ecr get-login-password --region us-east-2) | docker login -u AWS --password-stdin $BUILDER_IMAGE

docker pull ${BUILDER_IMAGE}:${BUILDER_TAG}


echo "DEBUG"
id -u
id -g
whoami


#
# If the cabal directory doesn't exist before running commands
# it will be created by docker but will be owned by root.  we
# want it to be owned by the same user who's running this script
#
mkdir -p .debian-cabal
# chmod g+s .debian-cabal
ls -lha
echo "--------------------------------------------------"
#
# the provided arguments are passed to the container
#
docker run --rm -t \
  -v $PWD/.debian-cabal:/home/haskell/.cabal \
  -v $PWD:/workdir  \
  -w /workdir \
  -e HOME=/workdir \
  -u root \
  ${BUILDER_IMAGE}:${BUILDER_TAG} \
  cabal update

ls -lha .debian-cabal/
exit

#
# the provided arguments are passed to the container
#
docker run --rm -t \
  -u $(id -u):$(id -g) \
  -v $PWD/.debian-cabal:/home/haskell/.cabal \
  -v $PWD:/workdir  \
  -w /workdir \
  ${BUILDER_IMAGE}:${BUILDER_TAG} \
  cabal configure

#
# the provided arguments are passed to the container
#
docker run --rm -t \
  -u $(id -u):$(id -g) \
  -v $PWD/.debian-cabal:/home/haskell/.cabal \
  -v $PWD:/workdir  \
  -w /workdir \
  ${BUILDER_IMAGE}:${BUILDER_TAG} \
  cabal build

echo $?
echo "after"
ls -lha
ls -lha files/usr/local/bin

mkdir -p files/usr/local/bin
find dist-newstyle/ -executable -type f ! -name '*.so' -exec cp {} files/usr/local/bin \;

docker build \
  --build-arg FROM_IMAGE=$FROM_IMAGE \
  --build-arg FROM_TAG=$FROM_TAG \
  --build-arg GHC_VER=$GHC_VER \
  --build-arg CABAL_VER=$CABAL_VER \
  -t $IMAGE_NAME:latest \
  .

echo $(aws ecr get-login-password --region us-east-2) | docker login -u AWS --password-stdin $IMAGE_NAME

docker push $IMAGE_NAME:latest
